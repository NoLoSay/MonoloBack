// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output into a separate subdirectory so multiple schemas can be used in a monorepo
  output   = "../../../../../node_modules/@prisma/client/base"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator docs {
//   provider = "node node_modules/prisma-docs-generator"
//   output   = "../../../../../docs/prisma"
// }

// generator dbml {
//   provider = "prisma-dbml-generator"
//   output   = "../../../../../docs/prisma-dbml"
// }

// ----------------------------------
// ---------- Localization ----------
// ----------------------------------

model Country {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  code        String       @unique
  longitude   Float?
  latitude    Float?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  Departments Department[]
}

model Department {
  id        Int       @id @default(autoincrement())
  name      String
  longitude Float?
  latitude  Float?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  countryId Int
  Country   Country   @relation(fields: [countryId], references: [id])
  Cities    City[]
}

model City {
  id           Int        @id @default(autoincrement())
  name         String
  zip          String
  longitude    Float?
  latitude     Float?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
  departmentId Int
  Department   Department @relation(fields: [departmentId], references: [id])
  Addresses    Address[]
}

model Address {
  id           Int       @id @default(autoincrement())
  houseNumber  String?
  street       String
  zip          String
  otherDetails String?
  longitude    Float?
  latitude     Float?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  cityId       Int
  City         City      @relation(fields: [cityId], references: [id])
  Sites        Site[]
}

// ---------------------------
// ---------- OAuth ----------
// ---------------------------

model OAuthProviders {
  providerId        Int                 @id @default(autoincrement())
  provider          String              @unique
  OAuthProviderUser OAuthProviderUser[]
  UserLoginLog      UserLoginLog[]
}

model OAuthProviderUser {
  providerUserId String
  userId         Int
  providerId     Int
  id             Int            @id @default(autoincrement())
  user           User           @relation(fields: [userId], references: [id])
  provider       OAuthProviders @relation(fields: [providerId], references: [providerId])
  // accessToken  String
  // refreshToken String

  @@unique([providerUserId, providerId])
  @@unique([userId, providerId])
}

// ---------------------------
// ---------- Users ----------
// ---------------------------

enum Role {
  USER
  CREATOR
  MANAGER
  MODERATOR
  ADMIN
}

model User {
  id            Int                 @id @default(autoincrement())
  uuid          String              @unique @default(uuid())
  username      String              @unique @default(uuid())
  email         String              @unique
  password      String
  picture       String?
  telNumber     String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  deletedAt     DateTime?
  likedVideos   UserlikesVideos[]
  oAuthAccounts OAuthProviderUser[]
  loginHistory  UserLoginLog[]
  profiles      Profile[]
}

model Profile {
  id        Int              @id @default(autoincrement())
  role      Role             @default(USER)
  isActive  Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  deletedAt DateTime?
  userId    Int
  user      User             @relation(fields: [userId], references: [id])
  videos    Video[]
  // LikedVideos UserlikesVideos[]
  managerOf SiteHasManager[]

  @@unique([userId, role])
}

// ----------------------------
// ---------- Videos ----------
// ----------------------------

enum ValidationStatus {
  VALIDATED
  REFUSED
  PENDING
}

model Video {
  id                 Int               @id @default(autoincrement())
  uuid               String            @unique @default(uuid())
  externalProviderId String            @unique
  validationStatus   ValidationStatus  @default(PENDING)
  duration           Int               @default(0)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  deletedAt          DateTime?
  deletedReason      String?
  itemId             Int
  profileId          Int
  likedBy            UserlikesVideos[]
  item               Item              @relation(fields: [itemId], references: [id])
  postedBy           Profile           @relation(fields: [profileId], references: [id])
}

model UserlikesVideos {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  userId    Int
  videoId   Int
  User      User      @relation(fields: [userId], references: [id])
  Video     Video     @relation(fields: [videoId], references: [id])
}

// -----------------------------
// ---------- Persons ----------
// -----------------------------

enum PersonType {
  ARTIST
  WRITER
  SCIENTIST
  CELEBRITY
  OTHER
}

model Person {
  id        Int        @id @default(autoincrement())
  name      String
  bio       String?
  type      PersonType
  birthDate DateTime?
  deathDate DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  Items     Item[]
}

// -----------------------------
// ---------- Items ----------
// -----------------------------

model ItemCategory {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  itemTypes   ItemType[]
}

model ItemType {
  id             Int          @id @default(autoincrement())
  name           String
  description    String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  itemCategoryId Int
  itemCategory   ItemCategory @relation(fields: [itemCategoryId], references: [id])
  items          Item[]
}

model Item {
  id              Int             @id @default(autoincrement())
  uuid            String          @unique @default(uuid())
  name            String
  description     String?
  picture         String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?
  itemTypeId      Int?
  relatedPersonId Int?
  itemType        ItemType?       @relation(fields: [itemTypeId], references: [id])
  relatedPerson   Person?         @relation(fields: [relatedPersonId], references: [id])
  exhibitedBy     ExhibitedItem[]
  videos          Video[]
}

// -------------------------------
// ---------- Exhibitions --------
// -------------------------------

model Exhibition {
  id               Int             @id @default(autoincrement())
  name             String
  shortDescription String?
  longDescription  String?
  startDate        DateTime?
  endDate          DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  deletedAt        DateTime?
  siteId           Int
  site             Site            @relation(fields: [siteId], references: [id])
  exhibitedItems   ExhibitedItem[]
}

model ExhibitedItem {
  id           Int        @id @default(autoincrement())
  itemId       Int
  exhibitionId Int
  item         Item       @relation(fields: [itemId], references: [id])
  exhibition   Exhibition @relation(fields: [exhibitionId], references: [id])

  @@unique([itemId, exhibitionId])
}

// ----------------------------
// ---------- Sites ----------
// ----------------------------

enum SiteType {
  MUSEUM
  LIBRARY
  ARCHIVE
  RESTAURANT
  ATTRACTION
  PUBLIC_PLACE
  OTHER
}

enum SiteTag {
  NOLOSAY
  DISABILITY_FRIENDLY
  DEAF_FRIENDLY
  BLIND_FRIENDLY
  OTHER
}

model Site {
  id               Int              @id @default(autoincrement())
  name             String
  shortDescription String?
  longDescription  String?
  telNumber        String?
  email            String?
  website          String?
  price            Float
  picture          String?
  type             SiteType
  tags             SiteTag[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  deletedAt        DateTime?
  addressId        Int
  address          Address          @relation(fields: [addressId], references: [id])
  exhibition       Exhibition[]
  siteHasManagers  SiteHasManager[]
}

model SiteHasManager {
  id        Int       @id @default(autoincrement())
  isMain    Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  siteId    Int
  profileId Int
  site      Site      @relation(fields: [siteId], references: [id])
  profile   Profile   @relation(fields: [profileId], references: [id])

  @@unique([profileId, siteId])
}

// --------------------------
// ---------- Logs ----------
// --------------------------

model UserLoginLog {
  id          Int             @id @default(autoincrement())
  loginTime   DateTime        @default(now())
  // ip                       String
  loginMethod OAuthProviders? @relation(fields: [providerId], references: [providerId])
  User        User?           @relation(fields: [userId], references: [id])
  userId      Int
  providerId  Int?
}
