// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output into a separate subdirectory so multiple schemas can be used in a monorepo
  output   = "../../../../../node_modules/@prisma/client/base"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator docs {
//   provider = "node node_modules/prisma-docs-generator"
//   output   = "../../../../../docs/prisma"
// }

// generator dbml {
//   provider = "prisma-dbml-generator"
//   output   = "../../../../../docs/prisma-dbml"
// }

// ----------------------------------
// ---------- Localization ----------
// ----------------------------------

model Country {
  id          Int          @id @default(autoincrement())
  name        String
  longitude   Float?
  latitude    Float?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  Departments Department[]
}

model Department {
  id        Int       @id @default(autoincrement())
  name      String
  longitude Float?
  latitude  Float?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  countryId Int
  Country   Country   @relation(fields: [countryId], references: [id])
  Cities    City[]
}

model City {
  id           Int        @id @default(autoincrement())
  name         String
  zip          String
  longitude    Float?
  latitude     Float?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
  departmentId Int
  Department   Department @relation(fields: [departmentId], references: [id])
  Addresses    Address[]
}

model Address {
  id           Int       @id @default(autoincrement())
  houseNumber  String?
  street       String
  zip          String
  otherDetails String?
  longitude    Float?
  latitude     Float?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  cityId       Int
  City         City      @relation(fields: [cityId], references: [id])
  Places       Place[]
}

// ---------------------------
// ---------- OAuth ----------
// ---------------------------

model OAuthProviders {
  providerId        Int                 @id @default(autoincrement())
  provider          String              @unique
  OAuthProviderUser OAuthProviderUser[]
  UserLoginLog      UserLoginLog[]
}

model OAuthProviderUser {
  providerUserId String
  userId         Int
  providerId     Int
  id             Int            @id @default(autoincrement())
  user           User           @relation(fields: [userId], references: [id])
  provider       OAuthProviders @relation(fields: [providerId], references: [providerId])
  // accessToken  String
  // refreshToken String

  @@unique([providerUserId, providerId])
  @@unique([userId, providerId])
}

// ---------------------------
// ---------- Users ----------
// ---------------------------

enum Role {
  ADMIN
  USER
  REFERENT
}

model User {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique @default(uuid())
  username          String              @unique @default(uuid())
  email             String              @unique
  password          String
  picture           String?
  role              Role                @default(USER)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  deletedAt         DateTime?
  postedVideos      Video[]
  likedVideos       UserlikesVideos[]
  oAuthAccounts     OAuthProviderUser[]
  loginHistory      UserLoginLog[]
  TmpVideo          TmpVideo[] ///TMP TMP TMP TMP TMP TMP TMP
  Exhibition        Exhibition[]
  PlaceHasReferents PlaceHasReferent[]
}

// ----------------------------
// ---------- Videos ----------
// ----------------------------

model Video {
  id        Int               @id @default(autoincrement())
  uuid      String            @unique @default(uuid())
  name      String
  url       String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  deletedAt DateTime?
  userId    Int
  User      User              @relation(fields: [userId], references: [id])
  likedBy   UserlikesVideos[]
}

model TmpVideo {
  id         Int       @id @default(autoincrement())
  uuid       String    @unique @default(uuid())
  providerId String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  userId     Int
  User       User      @relation(fields: [userId], references: [id])
}

model UserlikesVideos {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  userId    Int
  videoId   Int
  User      User      @relation(fields: [userId], references: [id])
  Video     Video     @relation(fields: [videoId], references: [id])
}

// -----------------------------
// ---------- Persons ----------
// -----------------------------

enum PersonType {
  ARTIST
  WRITER
  SCIENTIST
  CELEBRITY
  OTHER
}

model Person {
  id        Int        @id @default(autoincrement())
  name      String
  bio       String?
  type      PersonType
  birthDate DateTime?
  deathDate DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  Objects   Object[]
}

// -----------------------------
// ---------- Objects ----------
// -----------------------------

model ObjectCategory {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  ObjectTypes ObjectType[]
}

model ObjectType {
  id               Int            @id @default(autoincrement())
  name             String
  description      String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  deletedAt        DateTime?
  objectCategoryId Int
  ObjectCategories ObjectCategory @relation(fields: [objectCategoryId], references: [id])
  Objects          Object[]
}

model Object {
  id              Int          @id @default(autoincrement())
  name            String
  description     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  deletedAt       DateTime?
  objectTypeId    Int?
  relatedPersonId Int?
  ObjectType      ObjectType?  @relation(fields: [objectTypeId], references: [id])
  relatedPerson   Person?      @relation(fields: [relatedPersonId], references: [id])
  Exhibitions     Exhibition[]
}

// -------------------------------
// ---------- Exhibitions --------
// -------------------------------

model Exhibition {
  id               Int       @id @default(autoincrement())
  name             String
  shortDescription String?
  longDescription  String?
  startDate        DateTime
  endDate          DateTime
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?
  placeId          Int
  creatorId        Int
  Creator          User      @relation(fields: [creatorId], references: [id])
  Place            Place     @relation(fields: [placeId], references: [id])
  Objects          Object[]
}

// ----------------------------
// ---------- Places ----------
// ----------------------------

enum PlaceType {
  MUSEUM
  LIBRARY
  ARCHIVE
  RESTAURANT
  ATTRACTION
  PUBLIC_PLACE
  OTHER
}

enum PlaceTag {
  NOLOSAY
  DISABILITY_FRIENDLY
  DEAF_FRIENDLY
  BLIND_FRIENDLY
  OTHER
}

model Place {
  id                Int                 @id @default(autoincrement())
  name              String
  shortDescription  String?
  longDescription   String?
  telNumber         String?
  email             String?
  website           String?
  price             Float
  type              PlaceType
  tags              PlaceTag[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  deletedAt         DateTime?
  addressId         Int
  Address           Address             @relation(fields: [addressId], references: [id])
  Exhibition        Exhibition[]
  PlaceHasReferents PlaceHasReferent[]
}

model PlaceHasReferent {
  id        Int       @id @default(autoincrement())
  isMain    Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  placeId   Int
  userId    Int
  Place     Place     @relation(fields: [placeId], references: [id])
  User      User      @relation(fields: [userId], references: [id])
}

// --------------------------
// ---------- Logs ----------
// --------------------------

model UserLoginLog {
  id          Int             @id @default(autoincrement())
  loginTime   DateTime        @default(now())
  // ip                       String
  loginMethod OAuthProviders? @relation(fields: [providerId], references: [providerId])
  User        User?           @relation(fields: [userId], references: [id])
  userId      Int
  providerId  Int?
}
